# -*- coding: utf-8 -*-
"""Untitled1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1MNU4yDySh88DcfGFB8Q1ZymWW__HIg6q
"""

#data loading
import pandas as pd
movies=pd.read_csv('/content/drive/MyDrive/testdatsetfiles/dataset.csv') """for you use your directory where the csv file is respectively """
#data exploratiom
movies.describe
movies.isnull().sum()

movies.columns
#feature seletion
movies=movies[['id','title','overview','genre']]
movies['tags']=movies['overview']+movies['genre']
newdata=movies.drop(columns=['overview','genre'])
print("-------------------------------MOVIE RECOMMENDATION SYSTEM-------------------------------")
print("\n")
print("\n")
#text vectorization using sklearn
from sklearn.feature_extraction.text import CountVectorizer
cv=CountVectorizer(max_features=10000,stop_words='english')
vector=cv.fit_transform(newdata['tags'].values.astype('U')).toarray()
vector.shape
#finding cosine similarity
from sklearn.metrics.pairwise import cosine_similarity
similarity=cosine_similarity(vector)


#recommendation function(rcommendation baesd)
def recommand(movies):
    index = newdata[newdata['title'] == movies].index
    if not index.empty:
        index = index[0]
        distance = sorted(list(enumerate(similarity[index])), reverse=True, key=lambda vector:vector[1])
        recommended_movies = [newdata.iloc[i[0]].title for i in distance[1:6]]  # Exclude the input movie
        return recommended_movies
    else:
        return None

#testing only
print("total of 10000 movie titles are here! for testing  20 of them are listed below ....")
print("\n")
print("\n")
def list_all_movie_names(n=20):
    return newdata['title'].head(n).tolist()
all_movie_names = list_all_movie_names()
for name in all_movie_names:
    print(name)
print("\n")
user_input = input("Which movie would you like to watch? ")

recommended_movies = recommand(user_input)


if recommended_movies:
    print("You might also like these movies:")
    for movie in recommended_movies:
        print(movie.upper())

else:
    print("Sorry, no recommendations found.")
print("\n")
print("------------------------------------------------------------------------------------")
